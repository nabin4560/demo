Student 
	id,name,marks
----------------------------------------------------------------------------------------------------------------------------------
package com.torryharris.studentpack;

public class Student implements Comparable<Student>{
    private int id;
    private String name;
    private int marks;

    public Student(int id, String name, int marks) {
        this.id = id;
        this.name = name;
        this.marks = marks;
    }

    @Override
    public String toString() {
        return "Student{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", marks=" + marks +
                '}';
    }
    // comparable
    @Override
    public int compareTo(Student s) {
        if(marks<s.marks)
            return 1;
        else
            if(marks==s.marks)
                return 0;
            else
                return -1;
    }

}
package com.company;

import com.torryharris.studentpack.Student;

import java.util.ArrayList;
import java.util.Collections;

public class Main {

    public static void main(String[] args) {

        ArrayList<Student> slist = new ArrayList<Student>();
        slist.add(new Student(10,"nabin",90));
        slist.add(new Student(11,"anish",79));
        slist.add(new Student(12,"aarya",85));
        System.out.println("printing before sorting");
        for(Student s:slist) {
            System.out.println(s);
        }

        Collections.sort(slist);

        System.out.println("printing after sorting");
        for (Student s:slist)
            System.out.println(s);
    }
}
printing before sorting
Student{id=10, name='nabin', marks=90}
Student{id=11, name='anish', marks=79}
Student{id=12, name='aarya', marks=85}
printing after sorting
Student{id=10, name='nabin', marks=90}
Student{id=12, name='aarya', marks=85}
Student{id=11, name='anish', marks=79}
........................................................................................................................................................
package personpack;

public class Person {
    private int id;
    private String name;
    private int age;

    public Person(int id, String name, int age) {
        this.id = id;
        this.name = name;
        this.age = age;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    @Override
    public String toString() {
        return "Person{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", age=" + age +
                '}';
    }
}
package ComparatorPack;

import personpack.Person;

import java.util.Comparator;

public class AgeComparator implements Comparator<Person> {
    @Override
    public int compare(Person p1, Person p2) {
        if(p1.getAge()>p2.getAge()){
            return 1;
        }
        else
            if(p1.getAge()==p2.getAge())
                return 0;
            else
                return -1;
    }
}
package ComparatorPack;

import personpack.Person;

import java.util.Comparator;

public class NameComparator implements Comparator<Person> {

    @Override
    public int compare(Person p1, Person p2) {
        return (p1.getName().compareTo(p2.getName()));
    }
}
package com.company;

import ComparatorPack.AgeComparator;
import ComparatorPack.NameComparator;
import personpack.Person;

import java.util.ArrayList;
import java.util.Collections;

public class Main {

    public static void main(String[] args) {
        ArrayList<Person> slist = new ArrayList<Person>();
        slist.add(new Person(10,"nabin",25));
        slist.add(new Person(12,"anish",2));
        slist.add(new Person(13,"sanjay",16));
        slist.add(new Person(15,"roshan",20));

        System.out.println("before sorting");
        System.out.println(slist);
        Collections.sort(slist,new AgeComparator());
        System.out.println("after sorting");
        System.out.println(slist);

        Collections.sort(slist,new NameComparator());

        System.out.println(slist);


    }
}
before sorting
[Person{id=10, name='nabin', age=25}, Person{id=12, name='anish', age=2}, Person{id=13, name='sanjay', age=16}, Person{id=15, name='roshan', age=20}]
after sorting
[Person{id=12, name='anish', age=2}, Person{id=13, name='sanjay', age=16}, Person{id=15, name='roshan', age=20}, Person{id=10, name='nabin', age=25}]
[Person{id=12, name='anish', age=2}, Person{id=10, name='nabin', age=25}, Person{id=15, name='roshan', age=20}, Person{id=13, name='sanjay', age=16}]
........................................................................................................................................................
Sort according to pirority 
package ipack;

import java.util.Collections;

public class Item implements Comparable<Item> {
    private int id;
    private String name;

    public Item(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return "Item{" +
                "id=" + id +
                ", name='" + name + '\'' +
                '}';
    }

    @Override
    public int compareTo(Item i) {
        if(id>i.id)
            return 1;
        else
            if(id==i.id)
                return 0;
            else
                return -1;
    }
}
package com.company;

import ipack.Item;

import java.util.Collections;
import java.util.PriorityQueue;
import java.util.Queue;

public class Main {

    public static void main(String[] args) {
        Queue<Item> pq= new PriorityQueue<Item>();

        pq.add(new Item(10,"pen"));
        pq.add(new Item(13,"book"));
        pq.add(new Item(12,"pencil"));
        pq.add(new Item(9,"notebook"));
        pq.add(new Item(7,"eraser"));

        for(Item i:pq)
            System.out.println(i);

        System.out.println(pq.poll());

        System.out.println("**************************************");
        for(Item i:pq)
            System.out.println(i);

        System.out.println(pq.poll());

        System.out.println("**************************************");
        for(Item i:pq)
            System.out.println(i);

        System.out.println(pq.poll());
        System.out.println("**************************************");
        for(Item i:pq)
            System.out.println(i);

        System.out.println(pq.poll());
        System.out.println("**************************************");
        for(Item i:pq)
            System.out.println(i);

        System.out.println(pq.poll());
        System.out.println("**************************************");
        for(Item i:pq)
            System.out.println(i);

        System.out.println(pq.poll());

    }
}
Item{id=7, name='eraser'}
Item{id=9, name='notebook'}
Item{id=12, name='pencil'}
Item{id=13, name='book'}
Item{id=10, name='pen'}
Item{id=7, name='eraser'}
**************************************
Item{id=9, name='notebook'}
Item{id=10, name='pen'}
Item{id=12, name='pencil'}
Item{id=13, name='book'}
Item{id=9, name='notebook'}
**************************************
Item{id=10, name='pen'}
Item{id=13, name='book'}
Item{id=12, name='pencil'}
Item{id=10, name='pen'}
**************************************
Item{id=12, name='pencil'}
Item{id=13, name='book'}
Item{id=12, name='pencil'}
**************************************
Item{id=13, name='book'}
Item{id=13, name='book'}
**************************************
null

........................................................................................................................................................
Generic class

package com.torryharris.gpack;

public class Test <T,U> {
    private T ob1;
    private U ob2;

    public Test(T ob1, U ob2) {
        this.ob1 = ob1;
        this.ob2 = ob2;
    }

    @Override
    public String toString() {
        return "Test{" +
                "ob1=" + ob1 +
                ", ob2=" + ob2 +
                '}';
    }

    public T getOb1() {
        return ob1;
    }

    public U getOb2() {
        return ob2;
    }
}
package com.torryharris.gpack;

public class Product {
    private int pid;
    private String pName;

    public Product(int pid, String pName) {
        this.pid = pid;
        this.pName = pName;
    }

    @Override
    public String toString() {
        return "Product{" +
                "pid=" + pid +
                ", pName='" + pName + '\'' +
                '}';
    }
}
package com.company;
// In generic classes member variables are objects / Instances
import com.torryharris.gpack.Product;
import com.torryharris.gpack.Test;

public class Main {

    public static void main(String[] args) {

        Test<String,String> tob = new Test<String,String>("Hello","World");
        System.out.println(tob);

        Test<Integer,String> tob1 = new Test<Integer,String>(100,"nabin");
        System.out.println(tob1);

        Test<Integer, Product> tob2 = new Test<Integer, Product>(100,new Product(1,"pen"));
        System.out.println(tob2);
    }
}
Test{ob1=Hello, ob2=World}
Test{ob1=100, ob2=nabin}
Test{ob1=100, ob2=Product{pid=1, pName='pen'}}
.......................................................................................................................................................
generic method

public class Test {
    public static <T> void printArray(T[] arr)
    {
        for(T ele:arr)
        {
            System.out.println(ele);
        }
    }
}
public class Product {
    private int id;
    private String pName;

    public Product(int id, String pName) {
        this.id = id;
        this.pName = pName;
    }

    @Override
    public String toString() {
        return "Product{" +
                "id=" + id +
                ", pName='" + pName + '\'' +
                '}';
    }
}
public class Main {
    public static void main(String[] args) {
        Integer[] intarr = {3,5,7,9};
        Test.printArray(intarr);
        System.out.println("....................................");
        String [] strarr = {"nabin","king","Aarya"};
        Test.printArray(strarr);
        System.out.println("....................................");

        Product [] parr = {new Product(10,"pen"),new Product(12,"king")};
        Test.printArray(parr);

    }
}
3
5
7
9
....................................
nabin
king
Aarya
....................................
Product{id=10, pName='pen'}
Product{id=12, pName='king'}
........................................................................................................................................................
package com.torryharris.tpack;

import java.util.List;

public class Test {
    // Number is the base class for all numeric Wrapper Classes
    // (Integer ,Double,byte,long,short, are sub classes of Number base class

    public static Number sumOflist(List<? extends Number> nlist)
    {
        double s =0.0;
        for(Number n:nlist)
        {
            s+=n.doubleValue();
        }
        return s;
    }
    // lower bound ot Double
    // upcasted classes : Number and object

    public static Number sumOflist1(List<? super Double>llist)
    {
        double s=0.0;
        for (Object n:llist)
        {
            s+=((Number)n).doubleValue();
        }
        return s;
    }
    // unbound takes Object class References

    public static Number sumOfList2(List<?> list)
    {
        double s=0.0;
        for(Object n:list)
        {
            s+=((Number)n).doubleValue();
        }
        return s;
    }
}
package com.company;

import com.torryharris.tpack.Test;

import java.util.ArrayList;

public class Main {

    public static void main(String[] args) {

        /*ArrayList<Object> ilist = new ArrayList<Object>();
        ilist.add(10.0);
        ilist.add(10.0);
        ilist.add(10.0);
        ilist.add(10.0);
        ilist.add(10.0);
        ilist.add(10.0);
        ilist.add(10.0);
        System.out.println(Test.sumOflist(ilist)); *///Error due to upper bound(number)
        // upper bound in above code is instances of object class ...that's why this erro

        /*ArrayList<Double> ilist = new ArrayList<Double>();
        ilist.add(10.0);
        ilist.add(10.0);
        ilist.add(10.0);
        ilist.add(10.0);
        ilist.add(10.0);
        ilist.add(10.0);
        ilist.add(10.0);
        System.out.println(Test.sumOflist(ilist));  */

       /* ArrayList<Object> ilist = new ArrayList<Object>();
        ilist.add(10.0);
        ilist.add(10.0);
        ilist.add(10.0);
        ilist.add(10.0);
        ilist.add(10.0);
        ilist.add(10.0);
        ilist.add(10.0);
        System.out.println(Test.sumOflist1(ilist));*/

        ArrayList<Integer> ilist = new ArrayList<Integer>();
        ilist.add(10);
        ilist.add(10);
        ilist.add(10);
        ilist.add(10);
        ilist.add(10);
        System.out.println(Test.sumOfList2(ilist));
    }
}
70.0
........................................................................................................................................................
			Junit
		---------------------------------------
Junit is a framework which helps you to test your units (Methods)
it is regression testing framework to implement unit testing

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.thbs.bc.84</groupId>
    <artifactId>junitdemo3</artifactId>
    <version>1.0-SNAPSHOT</version>
    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>3.8.1</version>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.2</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.2</version>
            <scope>compile</scope>
        </dependency>
    </dependencies>

    <properties>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
    </properties>

</project>

public class MessageUtil {
    private String message;

    public MessageUtil(String message)
    {
        this.message=message;
    }
    // print the message
    public String PrintMessage()
    {
        System.out.println(message);
        return message;
    }

    public String salutationMessage()
    {
        message = "Hello!!"+message;
        System.out.println(message);
        return message;
    }
}

import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class Test1 {
    String message ="robert";

    MessageUtil mob = new MessageUtil(message);

    @Test
    public void Test()
    {
        System.out.println("inside Test1 testing printMessage method");
        assertEquals(message,mob.PrintMessage());
    }

}
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class Test2 {

    String message ="robert";

    MessageUtil mob = new MessageUtil(message);

    @Test
    public void Test()
    {
        System.out.println("inside test 1 testing salutaion message method");
        message = "Hello!!"+message;
        assertEquals(message,mob.salutationMessage());
    }
}
import org.junit.runner.RunWith;
import org.junit.runners.Suite;

@RunWith(Suite.class)
@Suite.SuiteClasses(
        {
                Test1.class,
                Test2.class,
        }
)
public class TestSuite {

   
}
inside Test1 testing printMessage method
robert
inside test 1 testing salutaion message method
Hello!!robert
........................................................................................................................................................
FILE HANDLING: 
file stored in secondary storage (a permanent Storage)
IO package ----> classess and Interfaces 
1. for input output oprations of files 
2.handling files
3.reading a file data
4.Writing data into the file

Stream classes are used IO processing in java

......................................................................................................................................................
1. how to create a file thru java programs,manage directories

file class object can all the oprations system files operations
1.creating a file 
2. creating a directory
3. list all files in a directory

........................................................................................................................................................
package com.company;

import java.io.File;
import java.io.IOException;

public class Main {

    public static void main(String[] args) {
        File file1 = new File("C:\\Users\\nabin_mahato\\Desktop\\thbsfile1.txt");
       // C:\Users\nabin_mahato\Desktop
        try {
            file1.createNewFile();
            System.out.println("file created successfully");
        } catch (IOException e) {
            e.printStackTrace();
        }
        System.out.println(file1.getAbsoluteFile());
        System.out.println(file1.getName());
        System.out.println(file1.getParent());

        File file2 = new File("C:\\Users\\nabin_mahato\\Desktop","thbsfile2.txt");
        try {
            file2.createNewFile();
            System.out.println("file created!!!");
        } catch (IOException e) {
            e.printStackTrace();
        }
        System.out.println(file2.getName());

        //C:\Users\nabin_mahato
        // Refer to an exiting dir
        File dir = new File("C:\\Users\\nabin_mahato\\Documents");
        
        File[] filelist = dir.listFiles();
        // to list only th files in Documents directory
        for(File f:filelist)
        {
            if(f.isFile())
                System.out.println(f.getName());
        }



    }
}
file created successfully
C:\Users\nabin_mahato\Desktop\thbsfile1.txt
thbsfile1.txt
C:\Users\nabin_mahato\Desktop
file created!!!
thbsfile2.txt
Assessment.txt
clone_git_hub.txt
desktop.ini
electronicdevice.zip
git config_pull file from git hub.txt
grep command.txt
java prog.txt
java_prog session_1.txt
java_prog session_2.txt
java_prog session_3.txt
java_prog session_4.txt
java_prog session_5.txt
java_prog session_6.txt
java_prog session_7.txt
new.txt
pushfile in github.txt
sort command.txt
sql question.odt
sql.txt
tr command.txt
unix command.txt
----------------------------------------------------------------------------------------------------------------------------------
1. how to create file , and how to know the file attributes 
2. how to read a file?
formats of data that can be read/write text files
1. text format ---> you can read/write text files
2. Byte format ---> to read/ write bytes in a file

oprations conducted on files
1. Reading operation
2. Writing operation ----> writing from the begining of the file
if file exits with some data ---> file will be overridden
3. append operation ---> Writing operation : data will be appended (added in the end of the file
4. delete a file 
5. rename a file
...............................................................................................................................................
Stream classes 
to read a file	 
	Input Streams 
		character :reader classes
		byte :streams
to write a file 
	outputStream
		character : writer classes
		byte e: stream
...............................................................................................................................................
problem statement :
1. read a file in character format
2. print the data read from the file in the console.


package com.company;

import java.io.*;

public class Main {

    public static void main(String[] args) {

        File file1 = new File("C:\\Users\\nabin_mahato\\Desktop\\thbsfile1.txt");
        try (
            FileReader fr = new FileReader(file1);
            BufferedReader br = new BufferedReader(fr);)
        {
            String str;
            str = br.readLine();
            while (!str.equals("END"))
            {
                System.out.println(str);
                str=br.readLine();
            }

        }catch (FileNotFoundException e )
        {
            e.printStackTrace();
        }catch (IOException e)
        {
            e.printStackTrace();
        }

    }
}

good morning 
good evening
good night
happy ending





